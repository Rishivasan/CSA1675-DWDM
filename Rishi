#include <stdio.h>
#include <limits.h>

int optimalBST(int keys[], int freq[], int n) {
    int dp[n][n];
    
    for (int i = 0; i < n; i++) {
        dp[i][i] = freq[i];
    }
    
    for (int length = 2; length <= n; length++) {
        for (int i = 0; i <= n - length; i++) {
            int j = i + length - 1;
            dp[i][j] = INT_MAX;
            
            // Calculate the cost for each possible root
            for (int r = i; r <= j; r++) {
                int cost = 0;
                for (int k = i; k <= j; k++) {
                    cost += freq[k];
                }
                if (r > i) {
                    cost += dp[i][r - 1];
                }
                if (r < j) {
                    cost += dp[r + 1][j];
                }
                if (cost < dp[i][j]) {
                    dp[i][j] = cost;
                }
            }
        }
    }
    
    return dp[0][n - 1];
}

int main() {
    int keys[] = {10, 12, 20};
    int freq[] = {34, 8, 50};
    int n = sizeof(keys) / sizeof(keys[0]);
    
    int result = optimalBST(keys, freq, n);
    printf("Minimum cost: %d\n", result);
    
    return 0;
}
